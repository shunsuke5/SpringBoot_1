SprintBootメモ

Spring Boot公式ドキュメントメモ====================================================================================================

{{{ Installing Spring Boot }}}

[Installing the Spring Boot CLI]

・CLIを使わなくてもspringbootは実行できるが、CLIはspringアプリをIDE無し手早く入手できる方法である。

{{{ Developing Your First Spring Boot Application }}}

・もし特定の問題を解決したい場合、以下のサイトを参考にするとよい。
　https://spring.io/
　https://spring.io/guides

・MavenかGradleをインストールする必要があるらしいので、Gradleを選択。

[Setting up the project with Gradle]

・開始するには build.gradleファイルを作成する必要がある。build.gradleは、プロジェクトをビルドするスクリプト。

　C:\spring-3.3.1 配下にbuild.gradleを置き、その場所で「gradle classes」を実行すると、どうやら想定通りの動きができたよう。

[Adding Classpath Dependencies]

・springbootはいくつかの「スターター」を提供しており、これによりクラスパスにjarを追加することができる。
　スターターは特定タイプのアプリを開発するのに必要となりそうな依存関係を提供する。

・大抵のbootアプリは、Gradleの org.springframework.boot プラグインを使用する。
　このプラグインは、役に立つデフォルト機能とgradleタスクを提供する。
　io.spring.dependency-management プラグインは、依存関係管理を提供しているため、
　blessed依存関係において、version タグを省略することができる。

　webアプリを開発するには、spring-boot-starter-web 依存関係を追加する。
　その前に、gradle dependencies コマンドで現在の状態を見ることができる。
　gradle dependencies コマンドは、プロジェクトの依存関係をツリー状で表示する。
　現在は、プロジェクトは依存関係を持っていない。必要な依存関係を追加するには、
　build.gradleファイルのdependencies{}内に、spring-boot-starter-web 依存関係を追加する。
　追加してからもう一度 gradle dependencies コマンドを実行すると、
　tomcatサーバーとspringbootを含む多くの追加された依存関係があることを確認できる。

[Writing the Code]

・アプリを完成させるためには、1つのjavaファイルを作成する必要がある。
　デフォルトでは、src/main/javaからソースをコンパイルするため、
　このディレクトリ構造を作成し、その配下にファイルを作成する必要がある。

[The @RestController and @RequestMapping Annotations]

・@RestControllerは、アノテーションの典型として知られている。これは、コードを読む人やspringに
　クラスが特定の役割を担っているというヒントを与える。今回の場合、私たちのクラスはwebの@Controllerなので、
　springは受信したwebリクエストを処理する時に、これを利用する。

・@RequestMappingは、ルーティングの情報を提供する。
　これは、パスが/で記された任意のHTTPリクエストをHomeメソッドにマッピングするよう、springに指示する。
　@RestControllerは、生成された文字列直接呼び出し元に戻すようspringに指示する。

The @SpringBootApplication Annotation

・@SpringBootApplicationは、メタアノテーション。これは@SpringBootConfiguration,@EnableAutoConfiguration,@ComponentScan
　を結合する。

　それらの中で、@EnableAutoConfigurationが最も興味深い。これは、追加したjar依存関係に基づいて
　springをどのように設定したいかを推測することをspringに指示する。
　spring-boot-starter-webがTomcatとspring MVCを追加するため、auto-configurationはwebアプリを開発することと仮定し、
　それに応じてspringをセットアップする。

The "main" Method

・このmainメソッドは、runメソッドを呼び出すことでSpringApplicationクラスをspringbootに委譲している。
　SpringApplicationは順番にアプリを起動し、springを開始し、自動設定されたtomcat webサーバーを開始する。
　私たちは SpringApplicationにそれが重要なspringコンポーネントであることを伝えるため、
　runメソッドに引数としてMyApplication.class を通す必要がある。
　また、args配列も渡され、任意のコマンドライン引数が公開される。

Running the Example

・Gradleのプラグインである org.springgramework.boot を使用したので、アプリを開始できる便利な bootRun が使用可能である。
　ルートプロジェクトディレクトリで gradle bootRun コマンドを実行してアプリを開始する。

The "main" Method から

==============================================================================================================================

その他メモ

・ビルドシステム(ビルドツール)とは、プロジェクトに関連するソースファイルやリソースファイルから実行可能なプログラムを
　生成するための処理を自動化する機能のこと。例えば、visual studioはそれ自体がビルドシステムの機能を兼ね備えている。
　ソリューションフォルダを作成してソースを記述した後、ビルドボタンで実行ファイルの作成を行っているが、
　内部ではソースのコンパイルや必要なライブラリのリンクなど様々処理が自動的に実行されている。

　ビルドとは、「ソースコードから実行可能なアプリケーションやパッケージを生成する一連の作業」を指す。
　このプロセスではコンパイル、リンク、パッケージングなどを含み、最終的にはユーザーに提供できる形の製品を生み出していく流れとなる。
　このビルドを自動化することで、特に大規模なプロジェクトや複数のプラットフォームをサポートする場合に重要となるため、
　効率的な開発を実現するためにもビルドプロセスは自動化するのが良い。

・

==============================================================================================================================

エラーやミス、わからなかったことなど

・Running the exampleにて、gradle bootRun コマンドを実行すると、

    FAILURE: Build failed with an exception.

    * What went wrong:
    Execution failed for task ':bootRun'.
    > Failed to calculate the value of task ':bootRun' property 'mainClass'.
       > Main class name has not been configured and it could not be resolved from classpath

　のエラーが出る。
　　→ MyApplication.javaを作成する場所を、「C:\Gradle\gradle-8.7\src\main\java」配下に作成していたが、
　　　よく考えたらおかしいと思い、springのルートディレクトリの方に「C:\spring-3.3.1\src\main\java」の構造を作成し、
　　　その配下にMyApplication.javaファイルを作成して gradle bootRun を実行すると、
　　　チュートリアルと同じspringの絵みたいなものが出てくるところまでは進むことができた。
　　　あと、一応owner配下に.gradleフォルダがあり、それが参照されて変な動きをしているのではないかと思ったのそれは削除している。
　　　(このowner/.gradleは、最初に間違えてownerのところでgradleをインストールやらなんやらしてしまったのが原因)

　しかし、上記のエラーは無くなったものの、新しいエラーが出た。


・